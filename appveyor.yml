#
# Some help for Python on AppVeyor:
# * https://packaging.python.org/appveyor/
# * https://ci.appveyor.com/tools/validate-yaml

version: '{branch}-{build}'

# No need for Python.
build: off
# We don't report the test in XUnit tests or any other format supported by
# AppVeyor.
test: off

# Don't build branch if there is an open PR, to prevent double builds.
# For now, Appveyor will only build PR commits and not commits to master or
# commits on random branches without an associated PR.
skip_branch_with_pr: true

# Not sure if the cache works.
# Note the use of single quotes around the entire line, when environment
# variables are used.
cache:
  - '%LOCALAPPDATA%\pip\Cache'


environment:
  global:
    TRIAL_REPORTER: text

  # Only use pre-installed Python versions, which Appveyor may upgrade to
  # a later point release.
  # See: http://www.appveyor.com/docs/installed-software#python
  matrix:
    - PYTHON_HOME: C:\\Python27-x64
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "64"
      TOXENV: py27-coverage-windows,codecov-publish


install:
  # Install OpenSSH through chocolatey
  - "choco install win32-openssh -confirm"
  - cmd: "SET PATH=%PATH%;C:\\Program Files\\OpenSSH-Win64"

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON_HOME%;%PYTHON_HOME%\\Scripts;%PATH%"
  - "SET LIB=%PYTHON_HOME%\\lib;%LIB%"

  # Get some information about the build environment.
  # Uncomment them. Left here so that you don't have to search the net for
  # how to run such command on Windows :)
  # - ps: "ls \"C:/\""
  # - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""
  # - ps: echo $env:PYTHON $env:TOXENV
  # Check that we have the expected version and architecture for Python
  - "python -c \"import sys; print(sys.prefix)\""
  - "python -c \"import sys; print(sys.exec_prefix)\""
  - "python -c \"import sys; print(sys.executable)\""
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # The build system itself is handled by tox.
  - "python -m pip install tox"

test_script:
  - "python -m tox -e %TOXENV%"
