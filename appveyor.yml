version: {branch}-{build}

# No need for Python.
build: off
# Don't build branch if there is a open PR, to prevent double builds.
skip_branch_with_pr: false

cache:
  - '%LOCALAPPDATA%\pip\Cache'

environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"

  matrix:
    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.
    # See: http://www.appveyor.com/docs/installed-software#python
    - PYTHON: C:\Python27-x64
      TOXENV: py27-coverage-windows

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }

  # Get some information about the build environment.
  - ps: "ls \"C:/\""
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  - ps: echo $env:TOXENV

  # Check that we have the expected version and architecture for Python
  - "%PYTHON%\\python --version"
  - "%PYTHON%\\python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "%PYTHON%\\Scripts\\pip install --disable-pip-version-check --user --upgrade pip"

  # Install the build dependencies of the project.
  - "%PYTHON%\\Scripts\\pip install tox-travis"

test_script:
  # Run the project tests
  - "%PYTHON%\\python -m tox -e %TOXENV%"

# Always push coverage, even if tests failed.
# This should be removed once coverage is pushed from tox.
on_finish:
  - "%PYTHON%\\python -m coverage combine"
  - "%PYTHON%\\python -m coverage xml"
  - "%PYTHON%\\python -m codecov"
